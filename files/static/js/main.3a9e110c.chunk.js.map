{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","data","getData","code","name","unitcost","status","listprice","attr","itemid","react_default","a","createElement","rc_easyui_min","style","height","clickToEdit","selectionMode","editMode","field","title","editable","align","editor","_ref","row","value","precision","_ref2","width","_ref3","render","_ref4","String","React","Component","Boolean","window","location","hostname","match","ReactDOM","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.3a9e110c.chunk.js","sourcesContent":["import React from 'react';\nimport { DataGrid, GridColumn, NumberBox, SwitchButton } from 'rc-easyui';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      data: this.getData()\n    }\n  }\n  getData() {\n    return [\n      {\n        code: \"FI-SW-01\",\n        name: \"Koi\",\n        unitcost: 10.0,\n        status: true,\n        listprice: 36.5,\n        attr: \"Large\",\n        itemid: \"EST-1\"\n      },\n      {\n        code: \"K9-DL-01\",\n        name: \"Dalmation\",\n        unitcost: 12.0,\n        status: true,\n        listprice: 18.5,\n        attr: \"Spotted Adult Female\",\n        itemid: \"EST-10\"\n      },\n      {\n        code: \"RP-SN-01\",\n        name: \"Rattlesnake\",\n        unitcost: 12.0,\n        status: true,\n        listprice: 38.5,\n        attr: \"Venomless\",\n        itemid: \"EST-11\"\n      },\n      {\n        code: \"RP-SN-01\",\n        name: \"Rattlesnake\",\n        unitcost: 12.0,\n        status: true,\n        listprice: 26.5,\n        attr: \"Rattleless\",\n        itemid: \"EST-12\"\n      },\n      {\n        code: \"RP-LI-02\",\n        name: \"Iguana\",\n        unitcost: 12.0,\n        status: true,\n        listprice: 35.5,\n        attr: \"Green Adult\",\n        itemid: \"EST-13\"\n      },\n      {\n        code: \"FL-DSH-01\",\n        name: \"Manx\",\n        unitcost: 12.0,\n        status: true,\n        listprice: 158.5,\n        attr: \"Tailless\",\n        itemid: \"EST-14\"\n      },\n      {\n        code: \"FL-DSH-01\",\n        name: \"Manx\",\n        unitcost: 12.0,\n        status: true,\n        listprice: 83.5,\n        attr: \"With tail\",\n        itemid: \"EST-15\"\n      },\n      {\n        code: \"FL-DLH-02\",\n        name: \"Persian\",\n        unitcost: 12.0,\n        status: true,\n        listprice: 23.5,\n        attr: \"Adult Female\",\n        itemid: \"EST-16\"\n      },\n      {\n        code: \"FL-DLH-02\",\n        name: \"Persian\",\n        unitcost: 12.0,\n        status: true,\n        listprice: 89.5,\n        attr: \"Adult Male\",\n        itemid: \"EST-17\"\n      },\n      {\n        code: \"AV-CB-01\",\n        name: \"Amazon Parrot\",\n        unitcost: 92.0,\n        status: true,\n        listprice: 63.5,\n        attr: \"Adult Male\",\n        itemid: \"EST-18\"\n      }\n    ]\n  }\n  render() {\n    return (\n        <div>\n          <h2>Cell Editing</h2>\n          <DataGrid\n              style={{ height: 250 }}\n              data={this.state.data}\n              clickToEdit\n              selectionMode=\"cell\"\n              editMode=\"cell\"\n          >\n            <GridColumn field=\"itemid\" title=\"Item ID\" editable></GridColumn>\n            <GridColumn field=\"name\" title=\"Name\" editable></GridColumn>\n            <GridColumn field=\"listprice\" title=\"List Price\" align=\"right\"\n                        editable\n                        editor={({ row }) => (\n                            <NumberBox value={row.listprice} precision={1}></NumberBox>\n                        )}\n            />\n            <GridColumn field=\"unitcost\" title=\"Unit Cost\" align=\"right\"\n                        editable\n                        editor={({ row }) => (\n                            <NumberBox value={row.unitcost}/>\n                        )}\n            />\n            <GridColumn field=\"attr\" title=\"Attribute\" width=\"30%\" editable></GridColumn>\n            <GridColumn field=\"status\" title=\"Status\" align=\"center\"\n                        editable\n                        editor={({ row }) => (\n                            <SwitchButton value={row.status}></SwitchButton>\n                        )}\n                        render={({ row }) => (\n                            <span>{String(row.status)}</span>\n                        )}\n            />\n          </DataGrid>\n        </div>\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}